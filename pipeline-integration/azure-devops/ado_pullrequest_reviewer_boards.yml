parameters:
  - name: x_api_consumer
    type: string
  - name: x_api_key
    type: string
  - name: api_host
    type: string
    default: 'https://app-aep-api-s-latest-uksouth.azurewebsites.net'
  - name: working_directory
    displayName: 'The working directory must include trailing slash'
    type: string
    default: '$(System.DefaultWorkingDirectory)/'


stages:
  - stage: GenAIPullRequestReview
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    jobs:
     - job: GenAIChecks
       steps: 
        - checkout: 'self'
          submodules: 'true'
          fetchDepth: 0  # Set fetch depth to 0
          persistCredentials: true
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            addToPath: true
            architecture: 'x64'
        - task: Bash@3
          displayName: 'Generate diff as text file'
          inputs:
            targetType: 'inline'
            script: |
              echo "Checking out main/master branch..."
              git checkout $(System.PullRequest.TargetBranchName)
              echo "Pulling latest changes from remote..."
              git pull origin $(System.PullRequest.TargetBranchName)
              echo "Switching back to PR branch..."
              git checkout "$(System.PullRequest.SourceCommitId)"
              echo "Showing diff..."
              git diff $(System.PullRequest.TargetBranchName)...$(System.PullRequest.SourceCommitId) > ${{ parameters.working_directory }}diff.txt
        - task: Bash@3
          displayName: 'Get the Boards Item'
          inputs:
            targetType: 'inline'
            script: |
              # Set the API URL
              ADO_API=$(echo "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)?api-version=7.1-preview.1" | sed -e 's/ /%20/g')

              # Send the request
              CURRENT_PR_RESPONSE_CODE=$(curl -s -o ${WORKING_DIRECTORY}CURRENT_PR_RESPONSE -w "%{http_code}" --location $ADO_API \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer $SYSTEM_ACCESSTOKEN")

              if [ $CURRENT_PR_RESPONSE_CODE -eq 200 ]; then
                  # Extract the work item link from the response
                  CURRENT_PR=$(cat ${WORKING_DIRECTORY}CURRENT_PR_RESPONSE)
                  WORK_ITEM_LINK=$(echo -n "$CURRENT_PR" | jq -r '._links.workItems.href')

                  # Get the work item based on link
                  WORK_ITEM_PR_URL_RESPONSE_CODE=$(curl -s -o ${WORKING_DIRECTORY}WORK_ITEM_PR_URL -w "%{http_code}" --location $WORK_ITEM_LINK \
                  --header "Content-Type: application/json" \
                  --header "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
                  --verbose)

              else
                  echo "ERROR: CURRENT_PR_RESPONSE_CODE is $CURRENT_PR_RESPONSE_CODE"
                  echo -e "ERROR: Unable to get work item link from PR\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt
                  exit 0
              fi


              if [ $WORK_ITEM_PR_URL_RESPONSE_CODE -eq 200 ]; then
                  # Extract the work item URL from the response
                  WORK_ITEM_PR_URL=$(cat ${WORKING_DIRECTORY}WORK_ITEM_PR_URL)
                  WORK_ITEM_URL=$(echo -n "$WORK_ITEM_PR_URL" | jq -r '.value[0].url')

                  # Get the work item based on link
                  WORK_ITEM_RESPONSE_CODE=$(curl -s -o ${WORKING_DIRECTORY}WORK_ITEM -w "%{http_code}" --location $WORK_ITEM_URL \
                  --header "Content-Type: application/json" \
                  --header "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
                  --verbose)

              else
                  echo "ERROR: WORK_ITEM_RESPONSE_CODE is $WORK_ITEM_RESPONSE_CODE"
                  echo -e "ERROR: Unable to get work item from PR\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt
                  exit 0
              fi

              if [ $WORK_ITEM_RESPONSE_CODE -eq 200 ]; then
                  # Extract the work item from the response
                  WORK_ITEM=$(cat ${WORKING_DIRECTORY}WORK_ITEM)
                  WORK_ITEM_TYPE=$(echo -n "$WORK_ITEM" | jq -r '.fields["System.WorkItemType"]')

                  # Extract the work item content based on type bug
                  if [ "$WORK_ITEM_TYPE" == "Bug" ]; then
                      WORK_ITEM_SUMMARY=$(echo -n "$WORK_ITEM" | jq -r '.fields["Custom.Summary"]')
                      echo -e "Linked work item is of type $WORK_ITEM_TYPE and has a summary of $WORK_ITEM_SUMMARY\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt

                  # Extract the work item content based on type task
                  elif [ "$WORK_ITEM_TYPE" == "User Story" ]; then
                      WORK_ITEM_SUMMARY=$(echo -n "$WORK_ITEM" | jq -r '.fields["System.Title"]')
                      WORK_ITEM_DESCRIPTION=$(echo -n "$WORK_ITEM" | jq -r '.fields["System.Description"]')
                      WORK_ITEM_ACCEPTANCE=$(echo -n "$WORK_ITEM" | jq -r '.fields["Microsoft.VSTS.Common.AcceptanceCriteria"]')
                      echo -e "Linked work item is of type $WORK_ITEM_TYPE has a description of $WORK_ITEM_DESCRIPTION and acceptance criteria of $WORK_ITEM_ACCEPTANCE\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt
                  # Extract the work item content based on type task
                  elif [ "$WORK_ITEM_TYPE" == "Task" ]; then
                      WORK_ITEM_SUMMARY=$(echo -n "$WORK_ITEM" | jq -r '.fields["System.Title"]')
                      WORK_ITEM_DESCRIPTION=$(echo -n "$WORK_ITEM" | jq -r '.fields["System.Description"]')
                      echo -e "Linked work item is of type $WORK_ITEM_TYPE has a description of $WORK_ITEM_DESCRIPTION\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt
                  #Â If the work item type is not recognised
                  else
                      echo "Work item is of type $WORK_ITEM_TYPE however no further content could be captured\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt
                  fi
              else
                  echo "ERROR: WORK_ITEM_RESPONSE_CODE is $WORK_ITEM_RESPONSE_CODE"
                  echo -e "ERROR: Unable to get work item from PR\n|||" >> ${WORKING_DIRECTORY}work_item_response.txt
                  exit 0
              fi
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)

        - task: Bash@3
          displayName: 'Generate markdown file'
          env: 
            WORKING_DIRECTORY: ${{ parameters.working_directory }}
            API_HOST: ${{ parameters.api_host }}
            X_API_CONSUMER: ${{ parameters.x_api_consumer }}
            X_API_KEY: ${{ parameters.x_api_key }}
          inputs:
            targetType: 'inline'
            script: |
              #!/bin/bash
              API_HOST=$(printenv API_HOST)
              WORKING_DIRECTORY=$(printenv WORKING_DIRECTORY)
              X_API_CONSUMER=$(printenv X_API_CONSUMER)
              X_API_KEY=$(printenv X_API_KEY)
              DIFF_FILE="diff.txt"
              WORK_ITEM_RESPONSE_FILE="work_item_response.txt"
              RESPONSE_MD_FILE="response.md"

              if [ ! -f "${WORKING_DIRECTORY}${DIFF_FILE}" ]; then
                  echo "File ${WORKING_DIRECTORY}${DIFF_FILE} not found."
                  exit 1
              fi

              # Check if the work_item_response file exists
              if [ ! -f "${WORKING_DIRECTORY}${WORK_ITEM_RESPONSE_FILE}" ]; then
                  echo "File ${WORKING_DIRECTORY}${WORK_ITEM_RESPONSE_FILE} not found."
                  exit 1
              fi

              file_contents=$(cat "${WORKING_DIRECTORY}${WORK_ITEM_RESPONSE_FILE}" "${WORKING_DIRECTORY}${DIFF_FILE}")
              json_body=$(jq -n --arg pt "pullrequest-review-with-work-context" --arg p "$file_contents" '{prompt_type: $pt, prompt: $p}')

              response=$(curl -s -i -X POST "${API_HOST}/predefined" \
                  -H "Content-Type: application/json" \
                  -H "X-API-CONSUMER: ${X_API_CONSUMER}" \
                  -H "X-API-KEY: ${X_API_KEY}" \
                  -d "$json_body")

              echo "Response: $response"

              response_code=$(echo "$response" | awk -F' ' '/HTTP\/1.1/{print $2}' | head -n 1)

              if [ "$response_code" -eq 200 ]; then
                  echo "File contents sent successfully."
                  # Remove headers
                  response_body=$(echo "$response" | tail -n +2)
                  # Remove more headers
                  response_body=$(echo "$response_body" | sed '/^date: /Id' | sed '/^server: /Id' | sed '/^content-length: /Id' | sed '/^content-type: /Id')
                  # remove trailing and leading quotes
                  response_body=$(echo "$response_body" | sed 's/^"\(.*\)"$/\1/')
                  # If the response body contains markdown prefix then remove it
                  if echo "$response_body" | grep -q '```markdown'; then
                    # remove the initial markdown code block ident if it exists
                    response_body=$(echo "$response_body" | sed 's/```markdown//')
                    # remove the last code block ident
                    response_body=$(echo "$response_body" | sed 's/```//')
                  fi
                  
                  # Write to file
                  echo -e "$response_body" > "${WORKING_DIRECTORY}${RESPONSE_MD_FILE}"
              else
                  echo "Error sending file contents: $response_code"
                  echo -e "Request to AEP failed to process" > "${WORKING_DIRECTORY}${RESPONSE_MD_FILE}"
              fi

              if [ $? -eq 0 ]; then
                  echo "Response saved as response.md"
              else
                  echo "Error writing to file in ${WORKING_DIRECTORY}."
                  exit 1
              fi

        - task: Bash@3
          displayName: 'Comment on the PR'
          inputs:
            targetType: 'inline'
            script: |
              COMMENT=$(<${{ parameters.working_directory }}response.md)
              ADO_API=$(echo "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=7.1-preview.1" | sed -e 's/ /%20/g')
  
              PR_COMMENT=$(jq --arg comment "$COMMENT" '.comments[0].content = $comment' <<< '{"comments": [{"parentCommentId": 0,"content": "","commentType": 1}],"status": 1}')
  
              curl --request POST "$ADO_API" \
              --header "Content-Type: application/json" \
              --header "Accept: application/json" \
              --header "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
              --data "$PR_COMMENT" \
              --verbose
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)