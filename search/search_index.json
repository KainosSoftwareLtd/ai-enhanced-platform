{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to AI Enhanced Platform (AEP), your companion to seamlessly interact with large language models. </p> <p>Empower your DevOps journey with AI-driven insights and assistance. \ud83d\ude80</p>"},{"location":"#what-is-aep","title":"What is AEP?","text":"<p>We know that engineers and architects want to build AI-backed tooling, but they don't always have the time or resources to do so. That's where AEP comes in. AEP is a platform that provides your project with easy-to-use Generative AI workflows, and a framework to experiment with your own. </p> <p>If you're looking to support engineers in the use of, and ability to build, AI-driven tooling, read our Hosting Guide.</p>"},{"location":"#aep-pillars","title":"AEP Pillars","text":"<p>The three pillars of AEP are:</p> <ul> <li>A pre-built set of templates, tools and examples to get started.</li> <li>We provide you with the assurance, messaging and guidance to help your engineers and customers understand the tools.</li> <li>A framework to build and share your own AEP-integrated tools and templates.</li> </ul>"},{"location":"#user-journey","title":"User Journey","text":"<p>We see the journey like this:</p> <p></p>"},{"location":"#features","title":"Features","text":"<p>Currently, AEP supports the following:</p> <ul> <li>AI-Driven Pull Request Summary: Get a summary of your pull request using AI.</li> <li>Azure DevOps</li> <li>GitHub Actions</li> <li>AI-Driven Pull Request Summary With Board Context: Get a summary of your pull request and an analysis of its done status based on the linked work</li> <li>Azure DevOps + Azure Boards</li> <li>AI-Driven Pull Request Review With Board Context: Get a review of your codes completeness as well as security, best practice and quality advice.</li> <li>Azure DevOps + Azure Boards</li> <li>AI-Driven Pull Request Review: Get AI-driven insights on your pull request changes.</li> <li>Azure DevOps</li> <li>GitHub Actions</li> <li>Custom AI-Driven Prompts: Tailor prompts to your specific needs using custom system and user prompts for precise model guidance.</li> <li>Build System Agnostic</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":""},{"location":"design/","title":"Design Documentation","text":""},{"location":"design/#hld-design","title":"HLD - Design","text":"<p>The following diagram illustrates the high-level design of the AEP API that is deployed in Azure:</p> <p></p>"},{"location":"design/#application-flow","title":"Application flow","text":"<p>The diagram below illustrates the flow of the AEP application from the pipeline's perspective. It showcases the interaction between the various components of the application and details the process when a prompt injection occurs within the flow.</p> <p></p>"},{"location":"design/#aep-costs-summary-march-31-april-29","title":"AEP Costs Summary (March 31 - April 29) \ud83d\udcb0","text":"Azure Resource SKU/Size Cost Azure App Service Plan B2: 2 Cores, 3.5 GB Ram, 10GB Storage (\u00a30.0.29) \u00a321.32 Storage Account/Log Analytics (PAYG) StorageV2/ LRS \u00a310.13 Azure Open AI PAYG \u00a35.87 Key Vault Standard \u00a30.18 Total \u00a337.50 <p>Additional Azure Resources with no cost currently - Managed Identities x2 (N/A)</p>"},{"location":"design/#typical-cost-to-run","title":"Typical Cost to Run","text":"<p>Running AEP typically costs approximately \u00a337.50 for the period from March 31 to April 29. However, costs may vary depending on usage patterns and additional services utilised.</p> <p>Note: The costs associated with Azure Open AI are currently listed as PAYG. Please be aware that these costs may increase in the future due to token usage, and any additional charges will be added later.</p>"},{"location":"feedback/","title":"Feedback","text":"<p>As AEP continues to evolve, we rely on your feedback to help us improve our services. Whether you have a suggestion, a bug report, or a feature request, we want to hear from you!</p>"},{"location":"feedback/#how-to-provide-feedback","title":"How to Provide Feedback","text":"<p>You can provide feedback in the following ways: - Online Feedback Form: Fill out our online feedback form (link to be provided). - Issues: Create an issue and describe your feedback in detail.</p>"},{"location":"feedback/#how-we-use-your-feedback","title":"How We Use Your Feedback","text":"<p>We take all feedback into consideration when planning future updates and improvements. Here's how we process and use the feedback we receive:</p> <ol> <li>Review: We review all feedback to understand the issues and suggestions.</li> <li>Prioritise: We prioritize the feedback based on its impact and feasibility.</li> <li>Implement: We implement changes based on the feedback.</li> <li>Communicate: We communicate any changes made in response to feedback.</li> </ol> <p>Thank you for helping us improve our services!</p>"},{"location":"feedback/#survey-results","title":"Survey Results","text":"<p>We regularly conduct surveys to gather more structured feedback. Here, we'll share the results of our latest surveys and the actions we're taking in response.</p>"},{"location":"getting-started-azure/","title":"Getting Started","text":"<p>This document provides a guide on how to set up and run the AEP API in Azure.</p> <ul> <li>Getting Started</li> <li>Terraform Setup and Usage</li> <li>Secrets Setup<ul> <li>Secrets</li> <li>Secrets with GitHub Actions</li> </ul> </li> <li>Prerequisites</li> <li>Linting</li> <li>Initialization</li> <li>Planning</li> <li>Applying</li> <li>Destroying</li> <li>Continuous Deployment with GitHub Actions</li> </ul>"},{"location":"getting-started-azure/#terraform-setup-and-usage","title":"Terraform Setup and Usage","text":"<p>This project uses Terraform to manage infrastructure. The Terraform scripts are located in the <code>terraform/envs/stable</code> directory.</p>"},{"location":"getting-started-azure/#secrets-setup","title":"Secrets Setup","text":""},{"location":"getting-started-azure/#secrets","title":"Secrets","text":"<p>To setup using Terraform, the following environment variables need to be set in your environment or in a <code>.env</code> file in the root of the project directory:</p> <pre><code>ARM_CLIENT_ID=&lt;arm_client_id&gt;\nARM_CLIENT_SECRET=&lt;arm_client_secret&gt;\nARM_SUBSCRIPTION_ID=&lt;arm_subscription_id&gt;\nARM_TENANT_ID&lt;arm_tenant_id&gt;\nBACKEND_RESOURCE_GROUP=&lt;backend_resource_group&gt;\nBACKEND_STORAGE_ACCOUNT=&lt;backend_resource_group&gt;\nBACKEND_CONTAINER_NAME=&lt;backend_container_name&gt;\nSYSTEM_API_KEY=&lt;system_api_key&gt;\n</code></pre> <p>The <code>ARM_CLIENT_ID</code>, <code>ARM_CLIENT_SECRET</code>, <code>ARM_SUBSCRIPTION_ID</code>, and <code>ARM_TENANT_ID</code> are your Azure service principal credentials. The <code>BACKEND_RESOURCE_GROUP</code> is the Azure resource group where your terraform state is located. The <code>BACKEND_STORAGE_ACCOUNT</code> is the Azure storage account where your terraform state is located. The <code>BACKEND_CONTAINER_NAME</code> is the Azure storage container where your terraform state is located. The <code>SYSTEM_API_KEY</code> is the API key for the 'system' consumer that can be used to interact with the AEP API.</p> <p>To use make, these secrets must be written to a <code>.env</code> file in the root of the project directory. </p>"},{"location":"getting-started-azure/#secrets-with-github-actions","title":"Secrets with GitHub Actions","text":"<p>Using the secrets outlined in the previous section, you can set up your GitHub repository secrets by following these steps:</p> <ol> <li>Go to your GitHub repository.</li> <li>Click on the <code>Settings</code> tab.</li> <li>Click on the <code>Secrets</code> tab.</li> <li>Click on the <code>New repository secret</code> button.</li> <li>Add the required secrets as outlined in the previous section.</li> </ol>"},{"location":"getting-started-azure/#prerequisites","title":"Prerequisites","text":"<ul> <li>Terraform &gt;= 0.14</li> <li>Azure CLI</li> <li>Make</li> </ul>"},{"location":"getting-started-azure/#linting","title":"Linting","text":"<p>Before running any Terraform commands, it's a good practice to lint your Terraform scripts to catch any syntax or formatting issues. You can do this by running the following command:</p> <pre><code>make tf-lint\n</code></pre> <p>If the linting fails, you will need to fix the issues before you can proceed. You can also run the following command to automatically fix some of the issues:</p> <pre><code>make tf-fmt\n</code></pre>"},{"location":"getting-started-azure/#initialization","title":"Initialization","text":"<p>Before you can apply any Terraform configuration, you need to initialize your Terraform working directory. You can do this by running the following command:</p> <pre><code>make tf-init\n</code></pre> <p>This command is also defined in the Makefile and it runs the init_terraform.sh script located in the buildscripts directory.</p>"},{"location":"getting-started-azure/#planning","title":"Planning","text":"<p>The terraform plan command is used to create an execution plan. This step is necessary to see which actions Terraform will perform to reach the desired state defined in the Terraform scripts. </p> <p>You can do this by running the following command:</p> <pre><code>make tf-plan\n</code></pre>"},{"location":"getting-started-azure/#applying","title":"Applying","text":"<p>After planning, the next step is to apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by a terraform plan execution plan. </p> <p>You can do this by running the following command:</p> <pre><code>make tf-apply\n</code></pre>"},{"location":"getting-started-azure/#destroying","title":"Destroying","text":"<p>If you want to destroy all resources created by Terraform, you can do this by running the following command:</p> <pre><code>make tf-destroy\n</code></pre> <p>Please note that this command will destroy all resources managed by Terraform in your Azure subscription.</p>"},{"location":"getting-started-azure/#continuous-deployment-with-github-actions","title":"Continuous Deployment with GitHub Actions","text":"<p>This project is set up to use GitHub Actions for continuous deployment. The workflow is defined in deploy-terraform.yml. On every push to the main branch, the workflow lints and initializes Terraform, creates an execution plan, and applies it. Ensure that the required environment variables are set in your GitHub repository secrets.</p>"},{"location":"getting-started-local/","title":"Getting Started - local","text":"<p>Here's how to run the API locally.</p> <ul> <li>Getting Started - local</li> <li>Secrets Setup<ul> <li>Requirements</li> <li>Start Server</li> <li>Docker</li> <li>Build and Run</li> </ul> </li> </ul>"},{"location":"getting-started-local/#secrets-setup","title":"Secrets Setup","text":"<p>To run the API locally, you will need to create a <code>.env</code> file in the root of the project with the following content:</p> <pre><code>OPENAI_API_TYPE=&lt;openai_api_type&gt;\nOPENAI_MODEL=&lt;openai_model&gt;\nAZURE_OPENAI_ENDPOINT=&lt;azure_openai_endpoint&gt;\nOPENAI_API_KEY=&lt;openai_api_key&gt;\nSYSTEM_API_KEY=&lt;system_api_key&gt;\nAZURE_VAULT_ID=&lt;azure_vault_id&gt;\nAZURE_CS_ENDPOINT=&lt;azure_cs_endpoint&gt;\nAZURE_CS_KEY=&lt;azure_cs_key&gt;\nAPPINSIGHTS_KEY=&lt;appinsights_key&gt;\nAPPLICATIONINSIGHTS_CONNECTION_STRING=&lt;applicationinsights_connection_string&gt;\nOTEL_RESOURCE_ATTRIBUTES=&lt;otel_resource_attributes&gt;\nOTEL_SERVICE_NAME=&lt;otel_service_name&gt;\nOTEL_LIVE_METRICS_ENABLED=&lt;otel_live_metrics_enabled&gt;\nOTEL_DISABLE_OFFLINE_STORAGE=&lt;otel_disable_offline_storage&gt;\nOTEL_TRACES_SAMPLER=&lt;otel_traces_sampler&gt;\n</code></pre> <p>The <code>OPENAI_API_TYPE</code> can be either <code>openai</code> or <code>azure</code>. The <code>OPENAI_MODEL</code> can be either <code>gpt-4-turbo</code> or <code>gpt-35-turbo</code>. The <code>AZURE_OPENAI_ENDPOINT</code> is the Azure OpenAI endpoint. The <code>OPENAI_API_KEY</code> is the OpenAI or Azure API key. The <code>SYSTEM_API_KEY</code> is the system API key you can use to authenticate as the 'system' consumer. The <code>AZURE_VAULT_ID</code> is your Azure Key Vault ID where consumer keys are stored. The <code>AZURE_CS_ENDPOINT</code> is the Azure Cognitive Services Content Safety endpoint. The <code>AZURE_CS_KEY</code> is the Azure Cognitive Services Content Safety key. The <code>APPINSIGHTS_KEY</code> is the Application Insights instrumentation key. The <code>APPLICATIONINSIGHTS_CONNECTION_STRING</code> is the Application Insights connection string. The <code>OTEL_RESOURCE_ATTRIBUTES</code> are the OpenTelemetry resource attributes. The <code>OTEL_SERVICE_NAME</code> is the OpenTelemetry service name. The <code>OTEL_LIVE_METRICS_ENABLED</code> indicates if live metrics are enabled. The <code>OTEL_DISABLE_OFFLINE_STORAGE</code> indicates if offline storage is disabled. The <code>OTEL_TRACES_SAMPLER</code> is the OpenTelemetry traces sampler.</p>"},{"location":"getting-started-local/#requirements","title":"Requirements","text":"<p>To install the requirements:</p> <pre><code>make build-local\n</code></pre> <p>This installs:</p> <pre><code>-- fastapi\n-- uvicorn\n-- requests\n-- pytest\n-- openai\n-- python-dotenv\n-- azure-identity\n-- azure-keyvault-secrets\n-- starlette\n-- tiktoken\n-- prometheus_fastapi_instrumentator\n-- pydantic-core\n</code></pre>"},{"location":"getting-started-local/#start-server","title":"Start Server","text":"<pre><code>make run-local\n</code></pre>"},{"location":"getting-started-local/#docker","title":"Docker","text":"<p>To run the API using Docker, you can use the following commands:</p>"},{"location":"getting-started-local/#build-and-run","title":"Build and Run","text":"<pre><code>make build\nmake run\n</code></pre>"},{"location":"hosting-guide/","title":"Introduction","text":"<p>At Kainos, we manage hundreds of build systems across many projects, and we know that this can lead to unnecessary repetition when it comes to building common tools. Siloes can be a barrier to experimentation, and with generative AI, the opportunities to experiment are seemingly endless.</p> <p>That's why we built the AI Enhanced Platform (AEP) and made it Open Source. AEP is a platform that provides your organisation with easy-to-use Generative AI workflows, and a framework to experiment with your own.</p>"},{"location":"hosting-guide/#how-aep-can-help-your-organisation","title":"How AEP can help your Organisation","text":"<p>AEP is designed to help your organisation in the following ways:</p> <ul> <li>Consistency: Provide a consistent way to interact with large language models and community tooling so you can get started right away.</li> <li>Cost Efficiency: Reduce the time and resources needed to build AI-backed DevOps tooling, with an average cost per developer at \u00a32 per month.</li> <li>Experimentation: A framework to experiment with your own Generative AI workflows, enabling your organisation to move quickly.</li> <li>Support: Support your adoption by using our messaging and guidance to help your engineers and customers understand the tools.</li> <li>Collaboration: Use the framework to build and share your own AEP-integrated tools and templates.</li> </ul>"},{"location":"hosting-guide/#host-aep-in-your-organisation","title":"Host AEP in your Organisation","text":"<p>Host AEP today by following our Azure Infrastructure Setup guide.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#authentication","title":"Authentication","text":"<p>AEP ensures secure access through flexible authentication mechanisms:</p> <ol> <li> <p>LOCAL AUTHENTICATION: If the API is running locally, you can use the <code>.env</code> file to set the <code>'system'</code> user API key.</p> <ul> <li>If the <code>X-API-CONSUMER</code> is <code>'system'</code> then the local API key will be used.</li> </ul> </li> <li> <p>AZURE AUTHENTICATION: If the API is running in Azure, it will use the Azure Key Vault to get the API key.</p> <ul> <li>If the <code>X-API-CONSUMER</code> is anything other than <code>'system'</code> then the Azure Key Vault will be used.</li> <li>A lookup will be used to get the API key from the Key Vault using the <code>X-API-CONSUMER</code> as the identifier.</li> </ul> </li> </ol>"},{"location":"usage/#endpoints","title":"Endpoints","text":""},{"location":"usage/#get","title":"<code>GET /</code>","text":"<p>Root endpoint and will return a list of available system prompts with their descriptions.</p>"},{"location":"usage/#post-predefined","title":"<code>POST /predefined</code>","text":"<p>Retrieve prompts based on predefined types, providing parameters for customised assessment:</p> <ul> <li><code>prompt_type</code>The name of the predefined prompt to use.</li> <li><code>prompt</code>: The content that you want the model to assess based on the predefined prompt type.</li> </ul>"},{"location":"usage/#post-custom","title":"<code>POST /custom</code>","text":"<p>Tailor prompts to your specific needs using custom system and user prompts for precise model guidance:</p> <ul> <li><code>system_prompt</code>: The system prompt is used to orient the model towards a personality or desired output.</li> <li><code>user_prompt</code>: The user prompt should tell the model what it is you want it to do with the prompt.</li> <li><code>prompt</code>: The content that you want the model to assess based on the custom prompt.</li> <li><code>compression_enabled</code>(optional): Compresses the input prompt to reduce the number of tokens. Default is false.</li> <li><code>model</code>(optional): The model you want to use as a string, currently available [\"gpt-4-turbo\", \"gpt-35-turbo\"]. Default is 'gpt-35-turbo'.</li> </ul>"},{"location":"version/","title":"Version History","text":"<p>Welcome to the exciting journey of AEP's evolution! This page details the various versions of AEP, detailing the enhancements, fixes, and changes introduced in each release.</p>"},{"location":"version/#version-10","title":"Version 1.0","text":"<p>\ud83d\udcc5 Release date: Coming Soon!</p> <ul> <li> <p>[ ] Security Review</p> <ul> <li>[X] Regex &amp; test using LLM-guard to prevent from prompt injecting (or similar) Examples: https://github.com/hmcts/cnp-flux-config/pull/30937 https://github.com/hmcts/cnp-flux-config/pull/30803</li> <li>[x] Enable renovate / dependabot on repository</li> <li>[ ] Vunerability scan (part of the pipeline?)</li> <li>[ ] Code review, to ensure no secrets are hardcoded etc</li> <li>[ ] Thorough examination of code for potential security issues</li> <li>[ ] Kainos security review</li> </ul> </li> <li> <p>[ ] Documentation</p> <ul> <li>[ ] How to onboard</li> <li>[X] Run locally step-by-step guide</li> <li>[X] Instructions for initial setup, prerequisites, and tools needed (Terraform, Azure, etc.)</li> <li>[ ] Kainos security review</li> </ul> </li> <li> <p>[ ] User Code Onboarding</p> <ul> <li>[ ] Simplified onboarding process</li> <li>[ ] Updated documentation to reflect changes</li> </ul> </li> <li> <p>[ ] Metrics</p> <ul> <li>[ ] Establish baseline metrics for usage and tracking</li> </ul> </li> </ul>"},{"location":"version/#version-20","title":"Version 2.0","text":"<p>\ud83d\udcc5 Release date: Coming Soon!</p> <p>In this release, we're focusing on improving our testing and onboarding processes, and integrating more closely with Kainos's internal operations. Here's what's coming:</p> <ul> <li> <p>[ ] Improved Testing</p> <ul> <li>[ ] Introduction of a dedicated development environment for safer and more efficient testing of new changes.</li> <li>[ ] Enhanced testing guidelines and procedures to ensure robustness and reliability.</li> </ul> </li> <li> <p>[ ] Internal Onboarding</p> <ul> <li>[ ] How-to documentation for Kainos, making it easier for new team members to get up to speed.</li> <li>[ ] Streamlined onboarding process with clear instructions and resources.</li> </ul> </li> <li> <p>[ ] Integration with Kainos Operations</p> <ul> <li>[ ] Implementation of prompts or similar to reflect internal Kainos principles.</li> </ul> </li> <li> <p>[ ] Security Review</p> <ul> <li>[ ] Regular security reviews to identify and address potential vulnerabilities.</li> <li>[ ] Implementation of suggestions and recommendations from security reviews.</li> </ul> </li> <li> <p>[ ] Additional Enhancements</p> <ul> <li>[ ] Continuous improvement based on user feedback and technological advancements.</li> </ul> </li> </ul>"}]}